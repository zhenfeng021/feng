[uwsgi]
workers = 10
master = 1
base = /data/coupon
plugins = python

py-autoreload = 1
enable-threads = true

#python module to import
app = app
module = %(app)

#home = %(base)/venv
pythonpath = %(base)

#socket file's location
socket = /var/www/coupon/%n.sock

wsgi-file=%(base)/app.py
#permissions for the socket file
chmod-socket    = 666

#the variable that holds a flask application inside the module imported at line #6
callable = app

; 将写入 log 的工作委托给 master 进程
log-master = true

; 单独开一个线程进行 log 写入工作，这样有更好的性能
threaded-log = true

#location of log files
logto = /data/logs/uwsgi/%n.log
log-maxsize = 20000000

; 将 uWSGI 请求 log 写入单独的 log 文件，这样做可以让log更加分离，便于查错
; 设置了此选项后，daemonize 设置的输出文件就得不到任何输出了
;req-logger = file:/data/logs/uwsgi/req.log

; 将 uWSGI stdout/stderr log 写入单独的 log 文件
; 因为设定了 req-logger ，必须同时设定 logger ，此时 daemonize 不会有任何输出
;logger = file:/data/logs/uwsgi/%n.log


